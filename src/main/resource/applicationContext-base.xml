<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       					   http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       					   http://www.springframework.org/schema/aop
       					   http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       					   http://www.springframework.org/schema/context
            			   http://www.springframework.org/schema/context/spring-context-4.3.xsd
            			   http://www.springframework.org/schema/tx  
            			   http://www.springframework.org/schema/tx/spring-tx-4.3.xsd 
            			   http://www.springframework.org/schema/jdbc 
            			   http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd 
            			   http://www.springframework.org/schema/cache 
            			   http://www.springframework.org/schema/cache/spring-cache-4.3.xsd"
	default-lazy-init="true">

	<!-- 如果多次出现只会加载第一个 -->
	<!-- 用于读取properties文件，此处将数据库连接的用户名密码等存在jdbc.properties文件中 -->
	<context:property-placeholder location="classpath*:config.properties"
		file-encoding="utf-8" />

	<!-- 数据源配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit}" />
		<property name="logAbandoned" value="${jdbc.logAbandoned}" />
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
	</bean>

	<!-- 配置 hibernate 会话工厂 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="cn.promore.bf.bean" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.enable_lazy_load_no_trans">${hibernate.enable_lazy_load_no_trans}</prop>
			</props>
		</property>
	</bean>
	<!-- 事务管理配置 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- spring对ehcache的缓存工厂支持 -->
	<bean id="cacheManagerFactory"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
		<property name="shared" value="true" />
	</bean>

	<!-- spring对ehcache的缓存管理 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="cacheManagerFactory"></property>
	</bean>

	<!-- 使用 annotation 自动注册bean,并检查@Controller, @Service, @Repository @Component 
		等注解已被注入 -->
	<context:component-scan base-package="cn.promore.bf">
		<context:exclude-filter type="regex"
			expression="cn\.promore\.bf\.controller\.[^.]+(Controller)" />
	</context:component-scan>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 缓存注解驱动 -->
	<cache:annotation-driven cache-manager="cacheManager" />

	<!-- 站点初始化监听器 -->
	<bean id="siteInfoInit" class="cn.promore.bf.listener.SiteInfoInitListener" />

	<!-- 启动触发器的配置开始 -->
	<bean name="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="dealUnDoneJobTrigger" />
				<ref bean="dealProcedureJobTrigger" />
			</list>
		</property>
	</bean>
	
	<!-- 启动触发器的配置结束 -->
	<bean id="dealProcedureJobTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="dealProcedureJobDetali" />
		</property>
		<property name="cronExpression">
			<value>${quartz.dealProcedureJob.time}</value>
		</property>
	</bean>
	
	<!-- job的配置开始 -->
	<bean id="dealProcedureJobDetali"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="concurrent">
			<value>false</value>
		</property>
		<property name="targetObject">
			<ref bean="dealUnDoneJob" />
		</property>
		<property name="targetMethod">
			<value>executeVoidProcedureSql</value>
		</property>
	</bean>
	

	<!-- 启动触发器的配置结束 -->
	<bean id="dealUnDoneJobTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="dealUnDoneJobDetali" />
		</property>
		<property name="cronExpression">
			<value>${quartz.dealJob.time}</value>
		</property>
	</bean>
	<!-- 调度的配置结束 -->

	<!-- job的配置开始 -->
	<bean id="dealUnDoneJobDetali"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="concurrent">
			<value>false</value>
		</property>
		<property name="targetObject">
			<ref bean="dealUnDoneJob" />
		</property>
		<property name="targetMethod">
			<value>work</value>
		</property>
	</bean>
	<!-- job的配置结束 -->

	<!-- 工作的bean -->
	<bean id="dealUnDoneJob" class="cn.promore.bf.quartz.job.DealJob" />
	
	<!-- 导入Activiti配置 
	<import resource="classpath:activiti.cfg.xml"/>-->
	<!-- 定义流程引擎配置 -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseSchemaUpdate" value="flase" />
		<property name="jobExecutorActivate" value="false" />
		<property name="activityFontName" value="宋体" />
		<property name="labelFontName" value="宋体" />
		<property name="dbIdentityUsed" value="false" />
	</bean>

	<!-- 定义流程引擎 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>

	<!-- 定义Service服务 -->
	<bean id="repositoryService" factory-bean="processEngine"
		factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine"
		factory-method="getRuntimeService" />
	<bean id="taskService" factory-bean="processEngine"
		factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine"
		factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngine"
		factory-method="getManagementService" />
	<bean id="identityService" factory-bean="processEngine"
		factory-method="getIdentityService" />
	<bean id="formService" factory-bean="processEngine"
		factory-method="getFormService"></bean>

</beans>
